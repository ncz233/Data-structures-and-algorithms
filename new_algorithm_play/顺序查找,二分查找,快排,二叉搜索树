///////////////////////////////////////dataMlment.h
#pragma once

//定义数据元素
#define MAX_SIZE 255
#define MAX_RECORD_SIZE 50
#define TRUE 1
#define FALSE 0

//查询关键字类型
typedef int KeyType;
typedef char InfoType;

//定义查询的数据类型
typedef struct
{
	KeyType id;//查询关键字
	InfoType* name;//数据域
}ElmentType;

//定义顺序表
typedef struct
{
	ElmentType* datas;//顺序表中数据元素集合
	int length;//顺序表中的元素个数
}seqList;



/////////////////////////////////////////seqList.h
#pragma once

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include"dataElment.h"

//初始化顺序表
void InitSeqList(seqList* seqlist);

//打印函数
void printSeqList(seqList* seqlist);

//查找顺序查找,根据查找关键字key返回元素在顺序表中的顺序(从1开始没找到返回0)
int SearchSeqList1(seqList* seqlist, KeyType key);

//查找2号版本,改进版的二号版本
int SearchSeqList2(seqList* seqlist, KeyType key);

//二分查找法返回关键字所在的位置(从1开始,没找到就返回0)
int SearchSeqListBinary(seqList* seqlist, KeyType key);

//排序快排
void my_qsort(seqList* seqlist, int low, int htgh);

//测试
void TestSeqListSearch();



////////////////////////////////////////////////////////////////BinarySortTree.h
#pragma once

//二叉排序树
#include <stdio.h>
#include"SeqList.h"
#include"dataElment.h"

//定义树节点以及二叉树
typedef struct bstNode
{
	ElmentType* data;//节点的数据
	struct bstNode* leftChild;//指向左子树
	struct bstNode* rightChild;//指向右子树
	int length;//节点总数
}BSTNode,*BSTtree;//一个是值,一个是指针

//初始化
void InitBSTNode(BSTNode** tree);

//创建二叉排序树,根据顺序表创建二叉排序树, low是最小值下标,high是最大值下标
void CreateBST(BSTNode** tree, seqList* seqList, int low, int high);

//中序遍历
void inOrderTraverse(BSTNode* node);

//查找二叉树中关键字key,查找的节点以node返回
void SearchBST(BSTtree tree, KeyType key, BSTNode** node);

//向二叉排序树插入元素
void insertBST(BSTtree* tree, ElmentType element);

//测试
void TestTree();



/////////////////////////////////////////////////////////seqList.c
#define _CRT_SECURE_NO_WARNINGS 1

#include"SeqList.h"

//初始化顺序表
void InitSeqList(seqList* seqlist)
{
	seqlist->datas = (ElmentType*)malloc(sizeof(ElmentType) * MAX_SIZE);//注意起始位置不存元素,
	//存代查找关键字key存入表头("哨兵位"),从后向前逐个比较,可免去查找过程中每一步都要检测是否查找完毕,加快速度

	seqlist->length = 0;
}

//打印函数
void printSeqList(seqList* seqlist)
{
	for (int i = 1; i <= seqlist->length; i++)//第一个位置不放元素,做哨兵位
	{
		printf("%d\t%s\n", seqlist->datas[i].id, seqlist->datas[i].name);
	}
}

//查找顺序查找,根据查找关键字key返回元素在顺序表中的顺序(从1开始没找到返回0)
int SearchSeqList1(seqList* seqlist, KeyType key)
{
	for (int i = 1; i < seqlist->length; i++)
	{
		if (seqlist->datas[i].id == key)
		{
			return i;
		}
	}
	return 0;
}

//查找2号版本,改进版的二号版本
int SearchSeqList2(seqList* seqlist, KeyType key)
{
	//第一个位置的元素设置为哨兵
	seqlist->datas[0].id = key;
	int i;
	//原算法中,for循环中有一次判断,for循环体内还会有一次判断
	//改进算法中的,我们只需要判断key值是否相等就可以了,省略了for循环次数的判断
	for (i = seqlist->length; seqlist->datas[i].id != key; i--)
	{
		//null
	}
	return i;

}

//二分查找法返回关键字所在的位置(从1开始,没找到就返回0)
int SearchSeqListBinary(seqList* seqlist, KeyType key)
{
	int low = 1;
	int high = seqlist->length;

	while (low <= high)
	{
		int mid = (low + high) / 2;
		if (key == seqlist->datas[mid].id)
		{
			return mid;
		}
		else if (key < seqlist->datas[mid].id)
		{
			high = mid - 1;
		}
		else
		{
			low = mid + 1;
		}
	}
	return 0;
}

//排序快排
void my_qsort(seqList* seqlist, int low, int htgh)
{
	int mid = 0;
	if (low < htgh)
	{
		mid = func(seqlist, low, htgh);
		my_qsort(seqlist, low, mid - 1);
		my_qsort(seqlist, mid + 1, htgh);
	}
}

//快排核心算法
int func(seqList* seqlist, int low, int htgh)
{
	int ret = seqlist->datas[low].id;
	ElmentType val = seqlist->datas[low];
	while (low < htgh)
	{
		while (low < htgh && seqlist->datas[htgh].id >= ret)
		{
			htgh--;
		}
		seqlist->datas[low] = seqlist->datas[htgh];

		while (low < htgh && seqlist->datas[low].id <= ret)
		{
			low++;
		}
		seqlist->datas[htgh] = seqlist->datas[low];
	}
	seqlist->datas[low] = val;
	seqlist->datas[low].id = ret;
	return low;
}

//测试
void TestSeqListSearch()
{
	seqList seqlist;
	InitSeqList(&seqlist);
	int keys[] = { 10,40,20,80,2,5,50 };
	char* valuse[] = { "小黑","阿吉","七二","阿凡达","金克拉","的撒给","的风格" };
	int len = sizeof(keys) / sizeof(int);
	for (int i = 1; i <= len; i++)
	{
		seqlist.datas[i].id = keys[i-1];
		seqlist.datas[i].name = (InfoType*)malloc(sizeof(InfoType) * MAX_RECORD_SIZE);
		strcpy(seqlist.datas[i].name, valuse[i - 1]);
		seqlist.length++;
	}
	printf("初始化顺序表\n");
	printSeqList(&seqlist);

	int searchKey = 40;
	int pos = SearchSeqList1(&seqlist, searchKey);
	printf("普通顺序表查找: searchKey = %d, pos = %d\n", searchKey, pos);
	pos = SearchSeqList2(&seqlist, searchKey);
	printf("改进版顺序表查找: searchKey = %d, pos = %d\n", searchKey, pos);
	
	my_qsort(&seqlist, 1, len);
	searchKey = 40;
	pos = SearchSeqListBinary(&seqlist, searchKey);
	printf("二分查找: searchKey = %d, pos = %d\n", searchKey, pos);//前提是排序好的
}



///////////////////////////////////////////////////////////////////////BinarySortTree.h
#define _CRT_SECURE_NO_WARNINGS 1

#include"BinarySortTree.h"

//初始化
void InitBSTNode(BSTNode* *tree)
{
	*tree = (BSTNode*)malloc(sizeof(BSTNode));
	(*tree)->leftChild = NULL;
	(*tree)->rightChild = NULL;
	(*tree)->length = 0;
}

//创建二叉排序树,根据顺序表创建二叉排序树,seqlist按升序排序后的顺序表, low是最小值下标,high是最大值下标
void CreateBST(BSTNode** tree, seqList* seqList, int low, int high)
{
	if (low > high)
	{
		return 0;
	}

	int mid = (low + high) / 2;
	if (!(*tree))//如果为空,需要重新初始化树
	{
		*tree = (BSTNode*)malloc(sizeof(BSTNode));
		(*tree)->leftChild = NULL;
		(*tree)->rightChild = NULL;
		(*tree)->length = 0;
	}

	(*tree)->data = &seqList->datas[mid];

	//递归创建左子树
	CreateBST(&((*tree)->leftChild), seqList, low, mid - 1);

	//递归创建右子树
	CreateBST(&((*tree)->rightChild), seqList, mid + 1, high);
}

//中序遍历
void inOrderTraverse(BSTNode* node)
{
	if (node)
	{
		inOrderTraverse(node->leftChild);
		printf("%d\t%s\n", node->data->id, node->data->name);
		inOrderTraverse(node->rightChild);

	}
}

//查找二叉树中关键字key,查找的节点以node返回
void SearchBST(BSTtree tree, KeyType key, BSTNode** node)
{
	if (!tree || key == tree->data->id)
	{
		*node = tree;
	}
	else if (key < tree->data->id)
	{
		SearchBST(tree->leftChild, key, node);
	}
	else
	{
		SearchBST(tree->rightChild, key, node);
	}
}

//向二叉排序树插入元素
void insertBST(BSTtree* tree, ElmentType element)
{
	if (*tree == NULL)//找到可以插入的空节点
	{
		BSTNode* newNode = (BSTNode*)malloc(sizeof(BSTNode));
		newNode->data = &element;
		newNode->leftChild = newNode->rightChild = NULL;
		*tree = newNode;
	}
	else if (element.id < (*tree)->data->id)
	{
		insertBST(&(*tree)->leftChild, element);
	}
	else if (element.id > (*tree)->data->id)
	{
		insertBST(&(*tree)->rightChild, element);
	}
}

//测试
void TestTree()
{
	seqList seqlist;
	InitSeqList(&seqlist);
	int keys[] = { 10,40,20,80,2,5,50 };
	char* valuse[] = { "小黑","阿吉","七二","阿凡达","金克拉","的撒给","的风格" };
	int len = sizeof(keys) / sizeof(int);
	for (int i = 1; i <= len; i++)
	{
		seqlist.datas[i].id = keys[i - 1];
		seqlist.datas[i].name = (InfoType*)malloc(sizeof(InfoType) * MAX_RECORD_SIZE);
		strcpy(seqlist.datas[i].name, valuse[i - 1]);
		seqlist.length++;
	}
	printf("初始化顺序表\n");
	printSeqList(&seqlist);

	printf("快排\n");
	my_qsort(&seqlist, 1, len);
	printSeqList(&seqlist);

	BSTtree tree;
	InitBSTNode(&tree);
	CreateBST(&tree, &seqlist, 1, seqlist.length);
	printf("中序遍历\n");
	inOrderTraverse(tree);

	int key = 3;
	ElmentType elem;
	elem.id = 3;
	elem.name = (ElmentType*)malloc(sizeof(ElmentType));
	strcpy(elem.name, "切_格瓦拉");
	BSTNode* node = (BSTNode*)malloc(sizeof(BSTNode));
	SearchBST(tree, elem.id, &node);
	if (node)
	{
		printf("结果:%d\t%s\n", node->data->id, node->data->name);
	}
	else
	{
		printf("没找到\n");
		insertBST(&tree, elem);
	}
	inOrderTraverse(tree);

	free(node);
}



///////////////////////////////////////////////////////////////////main.c
#define _CRT_SECURE_NO_WARNINGS 1

#include"SeqList.h"
#include<math.h>
#include"BinarySortTree.h"


int main()
{
	//TestSeqListSearch();
	TestTree();
	return 0;
}
