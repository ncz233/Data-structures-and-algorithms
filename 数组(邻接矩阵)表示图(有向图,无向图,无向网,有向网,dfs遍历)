///////////////////////////////////GraphModel.h
#pragma once
#include<stdio.h>
#include<stdlib.h>
#include<string.h>

//表示
#define OK 1
#define ERROR 0
#define MAX_VERTEX 100 //顶点的总数
#define VISITED 1
#define UNVISITED 0

//图的类型枚举
typedef enum
{
	DG,//有向图 == 0
	UDG,//无向图 == 1
	DN,//有向网 == 2
	UDN//无向网 == 3

}GraphKind;

//顶点的数据类型为字符型,使用时记得malloc分配内存
typedef	char VerTexType;

//设置权值类型为整数类型
typedef int ArcType;

//返回的状态类型
typedef	int Status;

//保存每个顶点的访问状态0就是未访问,1已访问
int visited[MAX_VERTEX];


///////////////////////////////////////////////////queue.h
#pragma once
#include "GraphModel.h"

typedef VerTexType ElemetType;

//链队的结点
typedef struct qNode
{
	ElemetType* data; //数据域
	struct qNode* next;	//指针域
}QueueNode;

//队列
typedef struct
{
	QueueNode* qFront;	//头指针删除
	QueueNode* qRear;	//尾指针插入
	int length;	//长度
}LinkedQueue;

//初始化队
void InitLinkedQueue(LinkedQueue* linkedqueue);

//入队
void OfferLinkedQueue(LinkedQueue* linkedqueue, ElemetType* data);

//出队
ElemetType* PollLinkedQueue(LinkedQueue* linkedqueue);

//判断是否为空
int IsLinkedQueueEmpty(LinkedQueue* linkedqueue);



///////////////////////////////////////////MatrixGraph.h
#pragma once
//数组的邻接矩阵表示法

//#include "GraphModel.h"
#include "queue.h"

//图的邻接矩阵存储表示
typedef struct
{
	//顶点数组(一共能存放多少个顶点)
	VerTexType* verTexS[MAX_VERTEX];
	//权数组
	ArcType arcs[MAX_VERTEX][MAX_VERTEX];//邻接矩阵(权数组)

	//图的顶点数量
	int verTexCount;
	//图的边或弧数量
	int arcCount;

	//图的类型
	GraphKind kind;

}MarixGraph;

//使用邻接矩阵创建无向图
Status CreateUDG(MarixGraph* G);

//使用邻接矩阵创建有向图
Status CreateDG(MarixGraph* G);

//无向网就是把邻接矩阵的1改成权值就行
Status CreateUDN(MarixGraph* G);

//有向网就是把不对称的无向网
Status CreateDN(MarixGraph* G);

//返回某个顶点在顶点集合中的下标(从0开始),不存在返回-1
int LocateVex(MarixGraph* G, VerTexType* vex);

//dfs查找,邻接矩阵的深度优先遍历
void DFSTraverse_AMG(MarixGraph* G);

//dfs遍历逻辑,深度优先遍历的核心算法,index为深度优先搜索的某个顶点下标
void DFS_AMG(MarixGraph* G, int index);

//返回顶点的vex所在行中的第一个邻接点下标
int FirstAdjVex_AMG(MarixGraph* G, VerTexType* vex);

//返回与顶点vex1邻接的另一个顶点(除vex2的下一个邻接点),没有返回-1
int SecondAdjVex_AMG(MarixGraph* G, VerTexType* vex1, VerTexType* vex2);

//bfs遍历逻辑,广度优先搜索的核心算法 - index为广度优先搜索的某个顶点下标
void BFS_AMG(MarixGraph* G, int index);

//bfs查找,邻接矩阵的广度优先遍历 - 无向图
void BFSTraverse_AMG(MarixGraph* G);

//测试
void testMatrixGrqph();


///////////////////////////////////////queue.c
#define _CRT_SECURE_NO_WARNINGS 1
#include "queue.h"

//初始化队(只有初始化可以定义队头的数据,其他操作不能定义队头数据,只能是队头的下一个指针)(创建对头,类似栈底,画图就知道了)
void InitLinkedQueue(LinkedQueue* linkedqueue)
{
	linkedqueue->qFront = (QueueNode*)malloc(sizeof(QueueNode));	//创建个队列,队列的队头.
	linkedqueue->qFront->next = NULL;	//队头的下一个节点为空,就是他没哟下一个节点,因为他要先弹出去
	linkedqueue->qRear = linkedqueue->qFront;	//队尾指向队头,因为要插入的,所以不能为空,初始化队尾指向了队头
}

//入队
void OfferLinkedQueue(LinkedQueue* linkedqueue, ElemetType* data)
{
	QueueNode* node = (QueueNode*)malloc(sizeof(QueueNode));//创建个链表

	node->data = data;//他的数据是tree的
	node->next = NULL;//他的下一节点为空,以便循环

	//队头是空的要弹出,所以入队不需要操作队头.
	linkedqueue->qRear->next = node;//队尾下一个节点插入
	linkedqueue->qRear = node;//队尾插入

}

//出队
ElemetType* PollLinkedQueue(LinkedQueue* linkedqueue)
{
	ElemetType* data = NULL;//返回的数据

	if (linkedqueue->qFront == linkedqueue->qRear)//这两个指针指向同一块地址就是这个队列为空
	{
		return data;
	}

	QueueNode* node = linkedqueue->qFront->next;//要释放的内存
	data = node->data;//取出他的数据

	linkedqueue->qFront->next = node->next;//队头的下一个指针指向队头的下下一个地址区域
	if (linkedqueue->qRear == node)//如果是最后一个数据,那么尾指向头,并且释放数据
	{
		linkedqueue->qRear = linkedqueue->qFront;
	}

	free(node);//释放
	return data;
}

//判断是否为空
int IsLinkedQueueEmpty(LinkedQueue* linkedqueue)
{
	if (linkedqueue->qFront == linkedqueue->qRear)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}


/////////////////////////////////////////////MatrixGraph.c
#define _CRT_SECURE_NO_WARNINGS 1
#include"MatrixGraph.h"

//使用邻接矩阵表示法创建无向图
//无向图的特点
// 无向图的邻接矩阵是对称的
// 顶点i的度 = 第i行(列)中1的个数
// 
//
//在有向图的邻接矩阵中
//  第i行含义:以节点vi为尾的弧(既出度边)
//  第i列含义:以节点vi为尾的弧(既入度边)
//有向图特点
// 有向图的邻接矩阵可能不是对称的
// 顶点的出度 = 第i行元素之和
// 顶点的入度 = 第i列元素之和
// 顶点的度 = 第i行元素之和 + 第i列元素之和
//

//使用邻接矩阵创建无向图
Status CreateUDG(MarixGraph* G)
{
	G->kind = UDG;//设置当前创建图的类型为无向图

	printf("请输入无向图的顶点数量\n");
	scanf("%d", &G->verTexCount);
	printf("边的数量\n");
	scanf("%d", &G->arcCount);
	
	printf("依次输入顶点信息\n");
	for (int i = 0; i < G->verTexCount; i++)
	{
		G->verTexS[i] = (VerTexType*)malloc(sizeof(VerTexType) * 10);//数组类型,整形的char类型
		printf("顶点%d:",i+1);
		scanf("%s", G->verTexS[i]);
	}

	//初始邻接矩阵所有边的权值设置为0
	for (int i = 0; i < G->verTexCount; i++)
	{
		for (int j = 0; j < G->verTexCount; j++)
		{
			G->arcs[i][j] = 0;//默认为0
		}
	}

	printf("请输入顶点和临界顶点信息,构建邻接矩阵\n");
	for (int i = 0; i < G->arcCount; i++)
	{
		VerTexType* vex1 = (VerTexType*)malloc(sizeof(VerTexType) * 10);
		VerTexType* vex2 = (VerTexType*)malloc(sizeof(VerTexType) * 10);

		printf("顶点:");
		scanf("%s", vex1);
		printf("临界点(与顶点相连的点):");
		scanf("%s", vex2);

		//分别获得两个顶点在顶点数组中的坐标
		//int x, y;
		int x = LocateVex(G, vex1);
		int y = LocateVex(G, vex2);
		if (x == -1 || y == -1)
		{
			return ERROR;
		}
		G->arcs[x][y] = 1;
		//无向图邻接表是对称的
		G->arcs[y][x] = G->arcs[x][y];

		free(vex1);
		free(vex2);
	}

	return OK;
}

//返回某个顶点在顶点集合中的下标(从0开始),不存在返回-1
int LocateVex(MarixGraph* G, VerTexType* vex)
{
	int index = 0;
	while (index < G->verTexCount)
	{
		if (strcmp(G->verTexS[index], vex) == 0)
		{
			break;
		}
		index++;
	}
	return index == G->verTexCount ? -1 : index;
}

//使用邻接矩阵创建有向图
//有向图特点
// 有向图的邻接矩阵可能不是对称的
// 顶点的出度 = 第i行元素之和
// 顶点的入度 = 第i列元素之和
// 顶点的度 = 第i行元素之和 + 第i列元素之和
//
Status CreateDG(MarixGraph* G)
{
	G->kind = DG;//设置当前创建图的类型为有向图

	printf("请输入有向图的顶点数量\n");
	scanf("%d", &G->verTexCount);
	printf("边的数量\n");
	scanf("%d", &G->arcCount);

	printf("依次输入顶点信息\n");
	for (int i = 0; i < G->verTexCount; i++)
	{
		G->verTexS[i] = (VerTexType*)malloc(sizeof(VerTexType) * 10);//数组类型,整形的char类型
		printf("顶点%d:", i + 1);
		scanf("%s", G->verTexS[i]);
	}

	//初始邻接矩阵所有边的权值设置为0
	for (int i = 0; i < G->verTexCount; i++)
	{
		for (int j = 0; j < G->verTexCount; j++)
		{
			G->arcs[i][j] = 0;//默认为0
		}
	}

	printf("请输入顶点和临界顶点信息,构建邻接矩阵\n");
	for (int i = 0; i < G->arcCount; i++)
	{
		VerTexType* vex1 = (VerTexType*)malloc(sizeof(VerTexType) * 10);
		VerTexType* vex2 = (VerTexType*)malloc(sizeof(VerTexType) * 10);

		printf("顶点:");
		scanf("%s", vex1);
		printf("临界点(与顶点相连的点):");
		scanf("%s", vex2);

		//分别获得两个顶点在顶点数组中的坐标
		//int x, y;
		int x = LocateVex(G, vex1);
		int y = LocateVex(G, vex2);
		if (x == -1 || y == -1)
		{
			return ERROR;
		}
		G->arcs[x][y] = 1;
		//有向图的邻接矩阵有可能不对称
		//G->arcs[y][x] = G->arcs[x][y];

		free(vex1);
		free(vex2);
	}

	return OK;
}

//无向网就是把邻接矩阵的1改成权值就行
Status CreateUDN(MarixGraph* G)
{
	G->kind = UDN;//设置当前创建图的类型为无向网

	printf("请输入无向网的顶点数量\n");
	scanf("%d", &G->verTexCount);
	printf("边的数量\n");
	scanf("%d", &G->arcCount);

	printf("依次输入顶点信息\n");
	for (int i = 0; i < G->verTexCount; i++)
	{
		G->verTexS[i] = (VerTexType*)malloc(sizeof(VerTexType) * 10);//数组类型,整形的char类型
		printf("顶点%d:", i + 1);
		scanf("%s", G->verTexS[i]);
	}

	//初始邻接矩阵所有边的权值设置为0
	for (int i = 0; i < G->verTexCount; i++)
	{
		for (int j = 0; j < G->verTexCount; j++)
		{
			G->arcs[i][j] = INT_MAX;//默认为整形最大值,代表无穷大
		}
	}

	printf("请输入顶点和临界顶点信息,构建邻接矩阵\n");
	for (int i = 0; i < G->arcCount; i++)
	{
		VerTexType* vex1 = (VerTexType*)malloc(sizeof(VerTexType) * 10);
		VerTexType* vex2 = (VerTexType*)malloc(sizeof(VerTexType) * 10);

		printf("顶点:");
		scanf("%s", vex1);
		printf("临界点(与顶点相连的点):");
		scanf("%s", vex2);

		//分别获得两个顶点在顶点数组中的坐标
		//int x, y;
		int x = LocateVex(G, vex1);
		int y = LocateVex(G, vex2);
		if (x == -1 || y == -1)
		{
			return ERROR;
		}
		int value;
		printf("请输入权值:");
		scanf("%d", &value);
		G->arcs[x][y] = value;
		//无向图邻接表是对称的
		G->arcs[y][x] = G->arcs[x][y];

		free(vex1);
		free(vex2);
	}

	return OK;
}

//有向网就是把邻接矩阵的1改成权值就行
Status CreateDN(MarixGraph* G)
{
	G->kind = DN;//设置当前创建图的类型为无向图

	printf("请输入有向网的顶点数量\n");
	scanf("%d", &G->verTexCount);
	printf("边的数量\n");
	scanf("%d", &G->arcCount);

	printf("依次输入顶点信息\n");
	for (int i = 0; i < G->verTexCount; i++)
	{
		G->verTexS[i] = (VerTexType*)malloc(sizeof(VerTexType) * 10);//数组类型,整形的char类型
		printf("顶点%d:", i + 1);
		scanf("%s", G->verTexS[i]);
	}

	//初始邻接矩阵所有边的权值设置为0
	for (int i = 0; i < G->verTexCount; i++)
	{
		for (int j = 0; j < G->verTexCount; j++)
		{
			G->arcs[i][j] = INT_MAX;//默认为整形的最大值,作为无穷大
		}
	}

	printf("请输入顶点和临界顶点信息,构建邻接矩阵\n");
	for (int i = 0; i < G->arcCount; i++)
	{
		VerTexType* vex1 = (VerTexType*)malloc(sizeof(VerTexType) * 10);
		VerTexType* vex2 = (VerTexType*)malloc(sizeof(VerTexType) * 10);

		printf("顶点:");
		scanf("%s", vex1);
		printf("临界点(与顶点相连的点):");
		scanf("%s", vex2);

		//分别获得两个顶点在顶点数组中的坐标
		//int x, y;
		int x = LocateVex(G, vex1);
		int y = LocateVex(G, vex2);
		if (x == -1 || y == -1)
		{
			return ERROR;
		}
		int value;
		printf("请输入权值:");
		scanf("%d", &value);
		G->arcs[x][y] = value;
		//有向图的邻接矩阵有可能不对称
		//G->arcs[y][x] = G->arcs[x][y];

		free(vex1);
		free(vex2);
	}

	return OK;
}

//dfs查找,邻接矩阵的深度优先遍历
void DFSTraverse_AMG(MarixGraph* G)
{
	//初始化状态数组
	for (int i = 0; i < G->verTexCount; i++)
	{
		visited[i] = UNVISITED;//初始状态设置为未访问
	}
	
	//dfs遍历
	for (int i = 0; i < G->verTexCount; i++)
	{
		if (!visited[i])//如果某个顶点没有被访问过
		{
			//调用遍历函数
			DFS_AMG(G, i);
		}
	}

}

//dfs遍历逻辑,深度优先遍历的核心算法,index为深度优先搜索的某个顶点下标
void DFS_AMG(MarixGraph* G, int index)
{
	printf(" -> %s", G->verTexS[index]);//访问当前顶点
	visited[index] = VISITED;	//更改当前顶点的访问状态
	
	//if (!visited[index])
	//{
	//	//核心逻辑
	//	DFS_AMG(G, index);//递归
	//	//还需要回溯
	// 
	//}

	for (int i = FirstAdjVex_AMG(G, G->verTexS[index]); i; i= SecondAdjVex_AMG(G, G->verTexS[index], G->verTexS[i]))
	{
		if (!visited[i])
		{
			DFS_AMG(G, i);//如果没有访问过,就继续递归调用访问
		}
	}
}

//返回顶点的vex所在行中的第一个邻接点下标
int FirstAdjVex_AMG(MarixGraph* G, VerTexType* vex)
{
	int i = LocateVex(G, vex);//找到顶点vex在顶点数组中的下标
	if (i == -1)
	{
		return ERROR;
	}
	int defaultWeighth;//默认权重,用之前的kind来判断是图还是网
	defaultWeighth = G->kind <= 1 ? 0 : INT_MAX;//图或者网的默认权重
	
	//搜索图的邻接矩阵中与顶点vex的第一个邻接点下标
	for (int j = 0; j < G->verTexCount; j++)
	{
		if (G->arcs[i][j] != defaultWeighth)
		{
			return j;
		}
	}
	return 0;
}

//返回与顶点vex1邻接的另一个顶点(除vex2的下一个邻接点),没有返回-1,回溯用
int SecondAdjVex_AMG(MarixGraph* G, VerTexType* vex1, VerTexType* vex2)
{
	int index1 = LocateVex(G, vex1);
	int index2 = LocateVex(G, vex2);

	if (index1 == -1 || index2 == -1)
	{
		return 0;
	}

	int defaultWeighth;//默认权重,用之前的kind来判断是图还是网
	defaultWeighth = G->kind <= 1 ? 0 : INT_MAX;//图或者网的默认权重

	for (int i = index2 + 1; i < G->verTexCount; i++)//回溯对于vex1要回溯的下标,为什么要+1呢,因为除了vex2的的下一个邻接点不回溯,其他回溯
	{
		if (G->arcs[index1][i] != defaultWeighth)
		{
			return i;
		}
	}
	return 0;
}

//bfs遍历逻辑,广度优先搜索的核心算法 - index为广度优先搜索的某个顶点下标
void BFS_AMG(MarixGraph* G, int index)
{
	printf(" -> %s", G->verTexS[index]);//访问
	visited[index] = VISITED;//状态以访问

	LinkedQueue queue;
	InitLinkedQueue(&queue);
	//当前顶点入队
	OfferLinkedQueue(&queue, G->verTexS[index]);
	while (!IsLinkedQueueEmpty(&queue))
	{
		//取出队头元素,遍历队头顶点的所有邻接点
		VerTexType* vex;//准备接收
		vex = PollLinkedQueue(&queue);

		for (int i = FirstAdjVex_AMG(G, vex); i; i = SecondAdjVex_AMG(G, vex, G->verTexS[i]))
		{
			if (!visited[i])
			{
				printf(" -> %s", G->verTexS[i]);//访问(遍历)
				visited[i] = VISITED;//状态以访问
				OfferLinkedQueue(&queue, G->verTexS[i]);
			}
		}
	}
}

//bfs查找,邻接矩阵的广度优先遍历
void BFSTraverse_AMG(MarixGraph* G)
{
	//初始化状态数组
	for (int i = 0; i < G->verTexCount; i++)
	{
		visited[i] = UNVISITED;
	}

	//循环遍历每个顶点
	for (int i = 0; i < G->verTexCount; i++)
	{
		if (!visited[i])//为访问遍历
		{
			BFS_AMG(G, i);
		}
	}
}

//测试
void testMatrixGrqph()
{
	MarixGraph G;

	//创建无向图
	//Status status = CreateUDG(&G);

	//创建有向图
	//Status status = CreateDG(&G);
	
	//无向网
	//Status status = CreateUDN(&G);

	//有向网
	Status status = CreateDN(&G);

	if (status == ERROR)
	{
		printf("创建图失败,请检查后重试\n");
		return;
	}

	printf("打印图的邻接矩阵\n");
	printf("\t");
	for (int i = 0; i < G.verTexCount; i++)
	{
		printf("\t%s", G.verTexS[i]);
	}
	printf("\n");
	for (int i = 0; i < G.verTexCount; i++)
	{
		printf("\t%s", G.verTexS[i]);
		for (int j = 0; j < G.verTexCount; j++)
		{
			if (G.arcs[i][j] == INT_MAX)
			{
				printf("\tNULL");
			}
			else
			{
				printf("\t%d", G.arcs[i][j]);//网中的
			}
			//printf("\t%d", G.arcs[i][j]);//图中的
		}
		printf("\n");
	}
	printf("\n深度优先遍历\n");
	DFSTraverse_AMG(&G);
	
	printf("\n广度优先遍历\n");
	BFSTraverse_AMG(&G);

}



//////////////////////////////////////////G_mode.c
#define _CRT_SECURE_NO_WARNINGS 1

#include"MatrixGraph.h"

int main()
{
	testMatrixGrqph();
	return 0;
}

