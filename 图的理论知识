#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>

//图的概念
// 线性结构 - 一对一
// 树形结构 - 一对多
// 图形结构 - 多对多
//
//
// 图的定义和基本术语
// 图的类型定义
// 图的存储结构
//	顺序存储结构 = 邻接矩阵表示法
//	链式存储结构 = 邻接表表示法
// 图的遍历
//	深度优先搜索(dfs)
//	广度优先搜索(bfs)
// 图的应用
//

//无向图
// 图:G = (V,E)	(可以把图比做成数学上的图,图的点叫顶点,边叫边懂?)
// V:顶点(数据元素)的有穷非空集合
// E:边的又穷集合
//
//有向图
// 有方向的边叫弧(zrc)使用有序偶<Vi,Vj>表示,有方向的边要写成<Vi,Vj>这样,只能有一种写法,头(开始的地方)写在前面,尾(指针指向的地方)写在后面
// 如果图中任意两个顶点之间的边都是有向边,则称该图为有向图
// 对于有向图G: G=(V,{E})
// 顶点集合:V = {V1.V2,V3.....};
// 边集合:E = {<V1,V2>,<V1,V3>.....};这要看图!!!!!
//
//完全图
// 任意两个顶点都有一条边相连的图叫做完全图
// 无向完全图边 = n(n-1)/2条边;(n是顶点个数)
// 有向完全图边 = n(n-1)条边;(因为需要来回相互指向)
// 对具有n个顶点和e条边的图
//  1.无向图: 0 <= e <= n*(n-1)/2;
//  2.有向图: 0 <= e <= n*(n-1);
// 
// 网
// 网是边或弧带权的图
//  图的边或弧所具有的相关数称为权(weight)
// 如:导航软件推荐最短路线问题建立的模型是有向网
//  无向网 = 边是无方向的,边上有权值的
//  有向网 = 边是有方向的,边上有权值的
// 
// 子图
//  假设有两个图: G1 = (V1,{E1})和G2 = (V2,{E2});
//  如果第二图的顶点 属于 第一图的顶点 且 第二图的边 属于 第一图的边,我们就称第二个图就是第一个图的子图
//  无向图和有向图都一样(注意有向图的边要匹配,如果不匹配那不是子图了)
// 
// 图的顶点和边的关系(无向图)
//  如果边(Vi,Vj)是属于边集合的(也就是E),则称顶点Vi和Vj互为邻接点(Adjacent)
//  边(Vi,Vj)依附于(incident)顶点Vi和Vj(或边与顶点相关联)
//  顶点V的度(Degree)是和V相关联的边的数量,记作TD(V)
//  无向图的边数为各顶点边数的一半
// 
// 图的顶点和边的关系(有向图)
// 前两个都一样
//  如果边(Vi,Vj)是属于边集合的(也就是E),则称顶点Vi和Vj互为邻接点(Adjacent)
//  边(Vi,Vj)依附于(incident)顶点Vi和Vj(或边与顶点相关联)
// 不一样
//  入度和出度
//  入度: 以顶点V为头的弧的数目称为V的入度(InDegree),记作ID(V)
//  出度: 以顶点V为尾的弧的数目称为V的入度(OutDegree),记作OD(V)
// 顶点V的度 TD(V) = ID(V) + OD(V)
// 结论: 有向图的弧度 = 总入度 = 总出度.
//
// 路径(path)
// 连续的边构成的有序顶点集合
//  无向图G = (V,{E})中,从顶点V1到顶点Vj的路径
//  注意:如果是有向图,则路径也应该是有向的
// 路径长度
//  指路径上的边或弧的数量
// 回路或环
//  第一个顶点到最后一个顶点相同的路径称为回路或环
// 简单回路或简单环
//  序列中顶点不重复出现的路径尾简单路径
//  除了第一个顶点和最后一个顶点外,其余顶点都不重复出现的回路
// 
// 连通图
//  在无向图G = (V,{E})中,若对任何两个顶点Vi,Vj都存在从Vi到Vj的路径,则称G是连通图(在有向图中称为 强连通图)
// 
// 定义与术语小结
//  图按照有无方向分为无向图和有向图
//   无向图由顶点和边构成,有向图由顶点和弧构成,弧有弧尾和弧头之分
//  如果任意两点之间都存在边,叫完全图;又想的叫做又向完全图
//   若无重复的边或顶点到自身的边则叫简单图
//  图中顶点之间有邻接点,依附的概念
//   无向图顶点的边数叫做度,有向图顶点分为入度和出度
//  图中的边或弧上带权就成为网
//  图中顶点间存在路径,两顶点存在路径就说明是连通图
//   如果路径最终回到起始点则称为环,当中不重复称为简单路径
//   若任意两顶点都是连通的,则图就是连通图,又向则称强连通图
//



