///////////////////////////////////////G_mode.h
#pragma once
//#include<stdio.h>
//#include<stdlib.h>
//#include<string.h>
#include<stdio.h>
#include<stdlib.h>
#include<string.h>

//表示
//#define OK 1
//#define ERROR 0
//#define MAX_VERTEX 100 //顶点的总数
#define OK 1
#define ERROR 0
#define MAX_VERTEX 100
#define VISITED 1
#define UNVISITED 0

//图的类型枚举
//typedef enum
//{
//	DG,//有向图 == 0
//	UDG,//无向图 == 1
//	DN,//有向网 == 2
//	UDN//无向网 == 3
//
//}GraphKind;
typedef enum
{
	DG,
	UDG,
	DN,
	UDN
}GraphKind;

//顶点的数据类型为字符型,使用时记得malloc分配内存
//typedef char VerTexType;
typedef char VerTexType;

//设置权值类型为整数类型
//typedef int ArcType;
typedef int ArcType;

//返回的状态类型
//typedef int Status;
typedef int Status;

//保存每个顶点的访问状态0未访问,1已访问
int visited[MAX_VERTEX];


////////////////////////////////////////////////////G_ajd_list.h
#pragma once
#include"G_mode.h"

//边或者弧的节点
typedef struct node
{
	int adjVex;	//该边指向这条边邻接点的下标
	struct node* nextEdge;	//指向下一条边节点的指针
	struct node* nextArc;	//指向下一条弧节点的指针
	ArcType weight;	//权重
}EdgeNode,ArcNode;

//顶点节点
typedef struct vexNode
{
	VerTexType* vex;	//定点值
	EdgeNode* firstEdge;	//指向第一条边的指针
	ArcNode* firstArc;	//指向第一条弧的指针
}VNode, AdjList[MAX_VERTEX];

//临界表实现的图结构
typedef struct adjGraph
{
	AdjList vexes;	//邻接表数组
	int vexCount;	//定点数量
	//union sdf	//联合体可以用,学过但是忘了,还有切片的我也忘了
	//{
	//	int edgeCount;	//图的边数
	//	int arcCount;	//图的弧数
	//};
	int edgeCount;	//图的边数
	int arcCount;	//图的弧数
	GraphKind kind;	//图的类型

}AdjListGraph;

//采用邻接表表示法创建无向图
Status CreateUDG_AdjList(AdjListGraph* G);

//采用邻接表表示法创建有向图
Status CreateDG_AdjList(AdjListGraph* G);

//无向网就是把无向图的weight有值就行
Status CreateUDN_AdjList(AdjListGraph* G);

//有向网
Status CreateDN_AdjList(AdjListGraph* G);

//返回顶点vex在顶点数组中的下标,没有找到返回-1
int LocateVex_AdjList(AdjListGraph* G, VerTexType* vex);

//dfs遍历核心函数,index时顶点在顶点数组中的下标,也是邻接点的下标
//用递归来实现回退,也实现了遍历
void DFS_ALJ(AdjListGraph* G, int index);

//基于邻接表的深度优先搜索
void DFSTraverse_ALG(AdjListGraph* G);

//bfs遍历核心函数,index时顶点在顶点数组中的下标,也是邻接点的下标
void BFS_ALG(AdjListGraph* G, int index);

//基于邻接表的广度优先搜索
void BFSTraverse_ALG(AdjListGraph* G);

//测试
void G_TestAdj();


////////////////////////////////////////////////////////queue.h
#pragma once
//#include "G_mode.h"
//
//typedef VerTexType ElemetType;

#include"G_ajd_list.h"

typedef VNode ElemetType;


//链队的结点
typedef struct qNode
{
	ElemetType* data; //数据域
	struct qNode* next;	//指针域
}QueueNode;

//队列
typedef struct
{
	QueueNode* qFront;	//头指针删除
	QueueNode* qRear;	//尾指针插入
	int length;	//长度
}LinkedQueue;

//初始化队
void InitLinkedQueue(LinkedQueue* linkedqueue);

//入队
void OfferLinkedQueue(LinkedQueue* linkedqueue, ElemetType* data);

//出队
void PollLinkedQueue(LinkedQueue* linkedqueue, ElemetType** element);

//判断是否为空
int IsLinkedQueueEmpty(LinkedQueue* linkedqueue);


//////////////////////////////////////////////////////////////queue.c
#define _CRT_SECURE_NO_WARNINGS 1
#include "queue.h"

//初始化队(只有初始化可以定义队头的数据,其他操作不能定义队头数据,只能是队头的下一个指针)(创建对头,类似栈底,画图就知道了)
void InitLinkedQueue(LinkedQueue* linkedqueue)
{
	linkedqueue->qFront = (QueueNode*)malloc(sizeof(QueueNode));	//创建个队列,队列的队头.
	linkedqueue->qFront->next = NULL;	//队头的下一个节点为空,就是他没哟下一个节点,因为他要先弹出去
	linkedqueue->qRear = linkedqueue->qFront;	//队尾指向队头,因为要插入的,所以不能为空,初始化队尾指向了队头
}

//入队
void OfferLinkedQueue(LinkedQueue* linkedqueue, ElemetType* data)
{
	QueueNode* node = (QueueNode*)malloc(sizeof(QueueNode));//创建个链表

	node->data = data;//他的数据是tree的
	node->next = NULL;//他的下一节点为空,以便循环

	//队头是空的要弹出,所以入队不需要操作队头.
	linkedqueue->qRear->next = node;//队尾下一个节点插入
	linkedqueue->qRear = node;//队尾插入
	linkedqueue->length++;

}

//出队
void PollLinkedQueue(LinkedQueue* linkedqueue, ElemetType** element)
{

	if (linkedqueue->qFront == linkedqueue->qRear)//这两个指针指向同一块地址就是这个队列为空
	{
		printf("为空失败\n");
		return;
	}

	QueueNode* node = linkedqueue->qFront->next;//要释放的内存
	*element = node->data;//取出他的数据

	linkedqueue->qFront->next = node->next;//队头的下一个指针指向队头的下下一个地址区域
	if (linkedqueue->qRear == node)//如果是最后一个数据,那么尾指向头,并且释放数据
	{
		linkedqueue->qRear = linkedqueue->qFront;
	}

	free(node);//释放
	linkedqueue->length--;
}

//判断是否为空
int IsLinkedQueueEmpty(LinkedQueue* linkedqueue)
{
	if (linkedqueue->qFront == linkedqueue->qRear)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}



//////////////////////////////////////////////////////G_ajd_list.c
#define _CRT_SECURE_NO_WARNINGS 1
#include"G_ajd_list.h"

//采用邻接表表示法创建无向图
Status CreateUDG_AdjList(AdjListGraph* G)
{
	G->kind = UDG;
	printf("请输入顶点数量\n");
	scanf("%d", &G->vexCount);
	printf("请输入边的数量\n");
	scanf("%d", &G->edgeCount);

	printf("请依次输入顶点信息\n");
	for (int i = 0; i < G->vexCount; i++)
	{
		G->vexes[i].vex = (VerTexType*)malloc(sizeof(VerTexType) * 10);
		printf("顶点%d:", i + 1);
		scanf("%s", G->vexes[i].vex);

		//初始化邻接表,把边置为空
		G->vexes[i].firstEdge = NULL;
	}

	printf("请输入顶点和临界点的信息,构建邻接表\n");
	for (int i = 0; i < G->edgeCount; i++)
	{
		VerTexType* vex1 = (VerTexType*)malloc(sizeof(VerTexType) * 10);
		VerTexType* vex2 = (VerTexType*)malloc(sizeof(VerTexType) * 10);
		printf("顶点:\n");
		scanf("%s", vex1);
		printf("邻接点:\n");
		scanf("%s", vex2);
		int x = LocateVex_AdjList(G, vex1);
		int y = LocateVex_AdjList(G, vex2);
		if (x == -1 || y == -1)
		{
			free(vex1);
			free(vex2);
			return ERROR;
		}

		EdgeNode* edgeNode = (EdgeNode*)malloc(sizeof(EdgeNode));
		edgeNode->adjVex = x;
		edgeNode->nextEdge = G->vexes[y].firstEdge;
		edgeNode->weight = 0;
		G->vexes[y].firstEdge = edgeNode;

		edgeNode = (EdgeNode*)malloc(sizeof(EdgeNode));
		edgeNode->adjVex = y;
		edgeNode->nextEdge = G->vexes[x].firstEdge;
		edgeNode->weight = 0;
		G->vexes[x].firstEdge = edgeNode;

		free(vex1);
		free(vex2);
	}
	return OK;
}

//返回顶点vex在顶点数组中的下标,没有找到返回-1
int LocateVex_AdjList(AdjListGraph* G, VerTexType* vex)
{
	int index = -1;
	for (int i = 0; i < G->vexCount; i++)
	{
		if (strcmp(G->vexes[i].vex, vex) == 0)
		{
			index = i;
			break;
		}
	}
	return index;
}

//采用邻接表表示法创建有向图
Status CreateDG_AdjList(AdjListGraph* G)
{
	G->kind = DG;
	printf("请输入顶点数量\n");
	scanf("%d", &G->vexCount);
	printf("请输入弧的数量\n");
	scanf("%d", &G->arcCount);

	printf("请依次输入顶点信息\n");
	for (int i = 0; i < G->arcCount; i++)
	{
		G->vexes[i].vex = (VerTexType*)malloc(sizeof(VerTexType) * 10);
		printf("顶点%d:", i + 1);
		scanf("%s", G->vexes[i].vex);

		//初始化邻接表,把弧置为空
		G->vexes[i].firstArc = NULL;//出弧指针(其实两个谁都可以作为出弧,随便)
		G->vexes[i].firstEdge = NULL;//入弧指针(把这个作为入弧就不用在创建入弧了)
	}

	printf("请输入顶点和临界点的信息,构建邻接表\n");
	for (int i = 0; i < G->arcCount; i++)
	{
		VerTexType* vex1 = (VerTexType*)malloc(sizeof(VerTexType) * 10);
		VerTexType* vex2 = (VerTexType*)malloc(sizeof(VerTexType) * 10);
		printf("顶点:\n");
		scanf("%s", vex1);
		printf("邻接点:\n");
		scanf("%s", vex2);
		int x = LocateVex_AdjList(G, vex1);
		int y = LocateVex_AdjList(G, vex2);
		if (x == -1 || y == -1)
		{
			free(vex1);
			free(vex2);
			return ERROR;
		}

		//生成边界点的邻接表(出弧)arcnode
		ArcNode* arcNode = (ArcNode*)malloc(sizeof(ArcNode));//arcnode 和 edgenode 类型一样
		arcNode->adjVex = y;
		arcNode->nextArc = G->vexes[x].firstArc;
		G->vexes[x].firstArc = arcNode;
		arcNode->weight = 0;

		//有向图的邻接表是两个,一个是出弧(邻接表),一个是入弧(逆邻接表)
		EdgeNode* edgeNode = (EdgeNode*)malloc(sizeof(EdgeNode));//创建一个空间,这个是链表的节点
		edgeNode->adjVex = x;//x是链表y是数组
		edgeNode->nextEdge = G->vexes[y].firstEdge;//x的下一条边为空
		edgeNode->weight = 0;//权重为0
		G->vexes[y].firstEdge = edgeNode;//y开始的指向的是x

		free(vex1);
		free(vex2);
	}
	return OK;
}

//无向网就是把无向图的weight有值就行
Status CreateUDN_AdjList(AdjListGraph* G)
{
	G->kind = UDN;
	printf("请输入顶点数量\n");
	scanf("%d", &G->vexCount);
	printf("请输入边的数量\n");
	scanf("%d", &G->edgeCount);

	printf("请依次输入顶点信息\n");
	for (int i = 0; i < G->vexCount; i++)
	{
		G->vexes[i].vex = (VerTexType*)malloc(sizeof(VerTexType) * 10);
		printf("顶点%d:", i + 1);
		scanf("%s", G->vexes[i].vex);

		//初始化邻接表,把边置为空
		G->vexes[i].firstEdge = NULL;
	}

	printf("请输入顶点和临界点的信息,构建邻接表\n");
	for (int i = 0; i < G->edgeCount; i++)
	{
		VerTexType* vex1 = (VerTexType*)malloc(sizeof(VerTexType) * 10);
		VerTexType* vex2 = (VerTexType*)malloc(sizeof(VerTexType) * 10);
		printf("顶点:\n");
		scanf("%s", vex1);
		printf("邻接点:\n");
		scanf("%s", vex2);
		printf("权重是:");
		int weight = 0;
		scanf("%d", &weight);

		int x = LocateVex_AdjList(G, vex1);
		int y = LocateVex_AdjList(G, vex2);
		if (x == -1 || y == -1)
		{
			free(vex1);
			free(vex2);
			return ERROR;
		}

		EdgeNode* edgeNode = (EdgeNode*)malloc(sizeof(EdgeNode));//创建一个空间,这个是链表的节点
		edgeNode->adjVex = x;//x是链表y是数组
		edgeNode->nextEdge = G->vexes[y].firstEdge;//x的下一条边为空
		edgeNode->weight = weight;//权重
		G->vexes[y].firstEdge = edgeNode;//y开始的指向的是x

		edgeNode = (EdgeNode*)malloc(sizeof(EdgeNode));//无向图对称同理
		edgeNode->adjVex = y;
		edgeNode->nextEdge = G->vexes[x].firstEdge;
		edgeNode->weight = weight;
		G->vexes[x].firstEdge = edgeNode;

		free(vex1);
		free(vex2);
	}
	return OK;
}

//有向网
Status CreateDN_AdjList(AdjListGraph* G)
{
	G->kind = DN;
	printf("请输入顶点数量\n");
	scanf("%d", &G->vexCount);
	printf("请输入弧的数量\n");
	scanf("%d", &G->arcCount);

	printf("请依次输入顶点信息\n");
	for (int i = 0; i < G->arcCount; i++)
	{
		G->vexes[i].vex = (VerTexType*)malloc(sizeof(VerTexType) * 10);
		printf("顶点%d:", i + 1);
		scanf("%s", G->vexes[i].vex);

		//初始化邻接表,把弧置为空
		G->vexes[i].firstArc = NULL;//出弧指针(其实两个谁都可以作为出弧,随便)
		G->vexes[i].firstEdge = NULL;//入弧指针(把这个作为入弧就不用在创建入弧了)
	}

	printf("请输入顶点和临界点的信息,构建邻接表\n");
	for (int i = 0; i < G->arcCount; i++)
	{
		VerTexType* vex1 = (VerTexType*)malloc(sizeof(VerTexType) * 10);
		VerTexType* vex2 = (VerTexType*)malloc(sizeof(VerTexType) * 10);
		printf("顶点:\n");
		scanf("%s", vex1);
		printf("邻接点:\n");
		scanf("%s", vex2);
		printf("权重是:");
		int value = 0;
		scanf("%d", &value);

		int x = LocateVex_AdjList(G, vex1);
		int y = LocateVex_AdjList(G, vex2);
		if (x == -1 || y == -1)
		{
			free(vex1);
			free(vex2);
			return ERROR;
		}

		//生成边界点的邻接表(出弧)arcnode
		ArcNode* arcNode = (ArcNode*)malloc(sizeof(ArcNode));//arcnode 和 edgenode 类型一样
		arcNode->adjVex = y;
		arcNode->nextArc = G->vexes[x].firstArc;
		G->vexes[x].firstArc = arcNode;
		arcNode->weight = value;

		//有向图的邻接表是两个,一个是出弧(邻接表),一个是入弧(逆邻接表)
		EdgeNode* edgeNode = (EdgeNode*)malloc(sizeof(EdgeNode));//创建一个空间,这个是链表的节点
		edgeNode->adjVex = x;//x是链表y是数组
		edgeNode->nextEdge = G->vexes[y].firstEdge;//x的下一条边为空
		edgeNode->weight = value;//权重为0
		G->vexes[y].firstEdge = edgeNode;//y开始的指向的是x

		free(vex1);
		free(vex2);
	}
	return OK;
}

//基于邻接表的深度优先搜索
void DFSTraverse_ALG(AdjListGraph* G)
{
	//初始化状态数组
	for (int i = 0; i < G->vexCount; i++)
	{
		visited[i] = UNVISITED;
	}
	for (int i = 0; i < G->vexCount; i++)
	{
		if (!visited[i])
		{
			DFS_ALJ(G, i);//如果某个顶点没有被访问过,就递归访问这个顶点
		}
	}
}

//dfs遍历核心函数,index时顶点在顶点数组中的下标,也是邻接点的下标(只被访问一次)
//用递归来实现回退,也实现了遍历
//要么邻接表遍历,要么逆邻接表遍历,这里时邻接表
void DFS_ALJ(AdjListGraph* G, int index)
{
	printf(" -> %s", G->vexes[index].vex);
	visited[index] = VISITED;//设置index的下标的顶点被访问

	//递归访问
	if (G->kind == UDG || G->kind == UDN)//无向的
	{
		EdgeNode* eNode = G->vexes[index].firstEdge;//第一个指针指向的第一个边
		while (eNode)
		{
			if (!visited[eNode->adjVex])//如果邻接点未访问,就递归访问
			{
				DFS_ALJ(G, eNode->adjVex);
			}
			eNode = eNode->nextEdge;//指针指向下一个边

		}
	}
	if (G->kind == DG || G->kind == DN)//又向的,其他同理
	{
		ArcNode* aNode = G->vexes[index].firstArc;
		while (aNode)
		{
			if (!visited[aNode->adjVex])
			{
				DFS_ALJ(G, aNode->adjVex);
			}
			aNode = aNode->nextArc;
		}
	}
}

///基于邻接表的广度优先搜索
void BFSTraverse_ALG(AdjListGraph* G)
{
	for (int i = 0; i < G->vexCount; i++)
	{
		visited[i] = UNVISITED;
	}

	for (int i = 0; i < G->vexCount; i++)
	{
		if (!visited[i])
		{
			BFS_ALG(G, i);
		}
	}
}

//bfs遍历核心函数,index时顶点在顶点数组中的下标,也是邻接点的下标
void BFS_ALG(AdjListGraph* G, int index)
{
	printf(" -> %s", G->vexes[index].vex);
	visited[index] = VISITED;//设置顶点状态为以访问
	LinkedQueue queue;//创建
	InitLinkedQueue(&queue);//初始化
	
	//顶点入队
	OfferLinkedQueue(&queue, &G->vexes[index]);//指针的地址了&G->vexes[index],所以释放内存会错
	//不为空,出队
	while (!IsLinkedQueueEmpty(&queue))
	{
		VNode* vNode = (VNode*)malloc(sizeof(VNode));
		PollLinkedQueue(&queue, &vNode);
		//获得出队顶点的下标
		int index_vNode = LocateVex_AdjList(&G, vNode->vex);
		if (index_vNode == -1)
		{
			return;
		}
		//遍历顶点对应的边或弧
		if (G->kind == UDG || G->kind == UDN)
		{
			EdgeNode* eNode = G->vexes[index_vNode].firstEdge;
			while (eNode)
			{
				if (!visited[eNode->adjVex])
				{
					printf(" -> %s", G->vexes[eNode->adjVex].vex);
					visited[eNode->adjVex] = VISITED;//设置顶点状态为以访问
					//顶点入队
					OfferLinkedQueue(&queue, &G->vexes[eNode->adjVex]);
				}
				eNode = eNode->nextEdge;
			}
		}
		else if (G->kind == DG || G->kind == DN)
		{
			ArcNode* aNode = G->vexes[index_vNode].firstArc;
			while (aNode)
			{
				if (!visited[aNode->adjVex])
				{
					printf(" -> %s", G->vexes[aNode->adjVex].vex);
					visited[aNode->adjVex] = VISITED;//设置顶点状态为以访问
					//顶点入队
					OfferLinkedQueue(&queue, &G->vexes[aNode->adjVex]);
				}
				aNode = aNode->nextArc;
			}
		}
		//free(vNode);//释放指针的地址会报错
	}

}//有Bug

//测试
void G_TestAdj()
{
	AdjListGraph G;
	/*Status status = CreateUDG_AdjList(&G);

	for (int i = 0; i < G.vexCount; i++)
	{
		VNode vNode = G.vexes[i];
		printf("顶点: %s", vNode.vex);
		EdgeNode* eNode = vNode.firstEdge;
		while (eNode)
		{
			printf("-> %d", eNode->adjVex);
			eNode = eNode->nextEdge;
		}
		printf("\n");
	}*/
	
	/*Status status = CreateDG_AdjList(&G);
	printf("邻接表\n");
	for (int i = 0; i < G.vexCount; i++)
	{
		VNode vNode = G.vexes[i];
		ArcNode* arcNode = vNode.firstArc;
		printf("顶点%s", vNode.vex);
		while (arcNode)
		{
			printf(" -> %d", arcNode->adjVex);
			arcNode = arcNode->nextArc;
		}
		printf("\n");
	}

	printf("逆邻接表\n");
	for (int i = 0; i < G.vexCount; i++)
	{
		VNode vNode = G.vexes[i];
		ArcNode* arcNode = vNode.firstEdge;
		printf("顶点%s", vNode.vex);
		while (arcNode)
		{
			printf(" <- %d", arcNode->adjVex);
			arcNode = arcNode->nextEdge;
		}
		printf("\n");
	}*/

	//Status status = CreateUDN_AdjList(&G);
	//for (int i = 0; i < G.vexCount; i++)
	//{
	//	VNode vNode = G.vexes[i];
	//	printf("顶点: %s", vNode.vex);
	//	EdgeNode* eNode = vNode.firstEdge;
	//	while (eNode)
	//	{
	//		printf(" -%d> %d",eNode->weight, eNode->adjVex);
	//		eNode = eNode->nextEdge;
	//	}
	//printf("\n");

	Status status = CreateDN_AdjList(&G);
	printf("邻接表\n");
	for (int i = 0; i < G.vexCount; i++)
	{
		VNode vNode = G.vexes[i];
		ArcNode* arcNode = vNode.firstArc;
		printf("顶点%s", vNode.vex);
		while (arcNode)
		{
			printf(" -%d> %d",arcNode->weight, arcNode->adjVex);
			arcNode = arcNode->nextArc;
		}
		printf("\n");
	}

	printf("逆邻接表\n");
	for (int i = 0; i < G.vexCount; i++)
	{
		VNode vNode = G.vexes[i];
		ArcNode* arcNode = vNode.firstEdge;
		printf("顶点%s", vNode.vex);
		while (arcNode)
		{
			printf(" <%d- %d", arcNode->weight, arcNode->adjVex);
			arcNode = arcNode->nextEdge;
		}
		printf("\n");
	}
	printf("邻接表实现的深度优先遍历\n");
	DFSTraverse_ALG(&G);
	printf("\n邻接表实现的广度优先遍历\n");
	BFSTraverse_ALG(&G);
}




/////////////////////////////////////G_list_main.c
#define _CRT_SECURE_NO_WARNINGS 1
#include"G_ajd_list.h"
//
int main()
{
	G_TestAdj();
	return 0;
}
