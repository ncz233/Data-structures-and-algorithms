/////////////////////////////////////数节点的数据头文件
#pragma once
#include<stdio.h>
#include<stdlib.h>

#define NAME_SIZE 255

typedef int dataType;

typedef struct
{
	dataType id;
	char name[NAME_SIZE];

}codeData;



//////////////////////////////////////////树节点头文件
#pragma once
#include"treeNodeDataFile.h"

typedef struct treeNode
{
	codeData val;//树节点
	struct treeNode* left;//左
	struct treeNode* right;//右

}TreeNode;



//////////////////////////////////////////////栈头文件
#pragma once
#include"treeNode.h"

//非递归方式的链栈结构

typedef struct stackNode
{
	TreeNode* data;	//数据域
	struct stackNode* next;	//指针域
}StackNode;

typedef struct
{
	StackNode* top;//栈顶结构
	int length;	//栈长度
}LinkedStack;

//初始化链栈
void InitLinkedStack(LinkedStack* linkedStack);

//入栈
int push_back(LinkedStack* linkedStack, TreeNode* node);

//出栈(第一个参数是栈,第二个参数是拿到出栈的数,因为栈里面的是指针,如可控制指针?只有二级指针)
int pop_back(LinkedStack* linkedStack, TreeNode** node);//入栈的时候是一级指针,指针如何指向指针 或者说 指针如何控制指针,只有二级指针.所以二级指针,如果写一级,相当于修改值(值传递)

//栈是否为空
int IsLinkedStackEmpty(LinkedStack* linkedStack);



/////////////////////////////////////////////栈实现文件
#define _CRT_SECURE_NO_WARNINGS 1
#include"LinkedStack.h"

//初始化链栈(创建栈底,不懂画图!!!)
void InitLinkedStack(LinkedStack* linkedStack)
{
	linkedStack->top == NULL;//栈节点为空
	linkedStack->length = 0;//栈的节点为空
}

//入栈
int push_back(LinkedStack* linkedStack, TreeNode* node)
{
	//创建栈节点
	StackNode* tempNode = (StackNode*)malloc(sizeof(StackNode));//创建栈节点数据

	//入栈
	tempNode->data = node;//最下面的数据是树节点的头一个,以此类推,直到树节点为空. 栈节点是数的节点
	tempNode->next = linkedStack->top;//一开始为空,且这是栈,指向空的是在最下面, 栈节点的下一个节点是栈底,栈底是空的

	linkedStack->top = tempNode;//复制下面的数据数据,然后让新创建的节点指向我,然后在复制这个新数据以此类推, 栈顶指向新的数据这个数据是栈顶,以此类推

	linkedStack->length++;//栈的个数++
	
	return 1;
}

//出栈
//由于此时形参和实参都是指向同一个存储单元，因此当形参指针所指向的数据改变时，实参指针所指向的数据也作相应的改变，因此这时的形参可以作为输出参数使用
int pop_back(LinkedStack* linkedStack, TreeNode** node)//参数是:栈和返回的数据,外部是传入指针的地址,所以要二级指针
{ 
	StackNode* tempNode;//临时指针用来释放地址的

	if (linkedStack->top == NULL || linkedStack->length == 0)//为空返回
	{
		return 0;
	}
	//不为空,返回栈中的数据域 - 难点,二级指针解引用是一级指针的地址
	*node = linkedStack->top->data;//返回的数据是栈顶的数据, 等号右边是只能指针接收,所以需要指针改变指向.因为
	//实参和形参是指向同一个地址，它们只是指向相同，但它们自身的地址不是同时申请的,因为在外边的函数内已经申请过了(在main函数外可以,就不能在函数内),现在又要改,所以不能用指针传递地址,要用二级指针传递地址

	tempNode = linkedStack->top;//要释放地址的指针指向栈顶
	linkedStack->top = linkedStack->top->next;//栈顶指向下一个节点

	free(tempNode);//释放指针指向的空间
	tempNode = NULL;//防止野指针出现

	linkedStack->length--;//栈的数--
	return 1;

}

//栈是否为空
int IsLinkedStackEmpty(LinkedStack* linkedStack)
{
	if (linkedStack->top == NULL || linkedStack->length == 0)
	{
		return 0;
	}
	return 1;
}



///////////////////////////////////////////////队列头文件
#pragma once
#include"treeNode.h"

typedef struct qNode
{
	TreeNode* data; //数据域
	struct qNode* next;	//指针域
}QueueNode;

typedef struct
{
	QueueNode* qFront;	//头指针删除
	QueueNode* qRear;	//尾指针插入
}LinkedQueue;

//初始化队
void InitLinkedQueue(LinkedQueue* linkedqueue);

//入队
void enQueue(LinkedQueue* linkedqueue, TreeNode* data);

//出队
TreeNode* deQueue(LinkedQueue* linkedqueue);

//判断是否为空
int IsLinkedQueueEmpty(LinkedQueue* linkedqueue);



//////////////////////////////////////////////队列实现文件
#define _CRT_SECURE_NO_WARNINGS 1

#include"LinkedQueue.h"

//初始化队(只有初始化可以定义队头的数据,其他操作不能定义队头数据,只能是队头的下一个指针)(创建对头,类似栈底,画图就知道了)
void InitLinkedQueue(LinkedQueue* linkedqueue)
{
	linkedqueue->qFront = (QueueNode*)malloc(sizeof(QueueNode));	//创建个队列,队列的队头.
	linkedqueue->qFront->next = NULL;	//队头的下一个节点为空,就是他没哟下一个节点,因为他要先弹出去
	linkedqueue->qRear = linkedqueue->qFront;	//队尾指向队头,因为要插入的,所以不能为空,初始化队尾指向了队头
}

//入队
void enQueue(LinkedQueue* linkedqueue, TreeNode* data)
{
	QueueNode* node = (QueueNode*)malloc(sizeof(QueueNode));//创建个链表

	node->data = data;//他的数据是tree的
	node->next = NULL;//他的下一节点为空,以便循环

	//队头是空的要弹出,所以入队不需要操作队头.
	linkedqueue->qRear->next = node;//队尾下一个节点插入
	linkedqueue->qRear = node;//队尾插入

}

//出队
TreeNode* deQueue(LinkedQueue* linkedqueue)
{
	TreeNode* data = NULL;//返回的数据

	if (linkedqueue->qFront == linkedqueue->qRear)//这两个指针指向同一块地址就是这个队列为空
	{
		return data;
	}

	QueueNode* node = linkedqueue->qFront->next;//要释放的内存
	data = node->data;//取出他的数据
	
	linkedqueue->qFront->next = node->next;//队头的下一个指针指向队头的下下一个地址区域
	if (linkedqueue->qRear == node)//如果是最后一个数据,那么尾指向头,并且释放数据
	{
		linkedqueue->qRear = linkedqueue->qFront;
	}

	free(node);//释放
	return data;
}

//判断是否为空
int IsLinkedQueueEmpty(LinkedQueue* linkedqueue)
{
	if (linkedqueue->qFront == linkedqueue->qRear)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}



////////////////////////////////////////////////////////////////总头文件
#pragma once
#include"treeNode.h"
#include"LinkedStack.h"
#include"LinkedQueue.h"
#include<string.h>


typedef struct
{
	TreeNode* root;//保存根节点
	int length;	//节点的总数
	int depth;	//深度
	int diameter;	//直径(从叶节点到叶节点的最长路径)
}BinaryTree;

//初始化
void InitBinaryTree(BinaryTree* tree);

//创建 - 构造二叉树,外部需要实现对节点分配内存
TreeNode* CreateBinaryTree(TreeNode* root);

//深度
int funcDepth(TreeNode* root);

//遍历(前序递归,中序和后序不用写了,都知道了)
void qxbltree(TreeNode* root);

//遍历(非递归遍历,利用栈)
void inOrderTraversr_Re(TreeNode* node);

//后序遍历
void posOrderTraverse(TreeNode* root);

//层序遍历(自上而下,从左到右),利用队列,不需要递归
void zOrderTravers(TreeNode* node);



////////////////////////////////////总实现文件
#define _CRT_SECURE_NO_WARNINGS 1
#include"BinaryTree.h"

//静态的, 用来实现节点的自增长
static int id = 0;

//初始化
void InitBinaryTree(BinaryTree* tree)
{
	tree->root = NULL;
	tree->length = 0;
	tree->depth = 0;
	tree->diameter = 0;
}

//创建
TreeNode* CreateBinaryTree(TreeNode* root)
{
	if (!root)//节点为空,就退出创建过程
	{
		return NULL;
	}

	char inputName[NAME_SIZE];	//用户输入节点名
	scanf("%s", &inputName);
	//用户输入回车表示结束当前子树的创建
	if (strcmp(inputName, "0") == 0)
	{
		return NULL;
	}

	//创建当前节点
	root->val.id = ++id;
	strcpy(root->val.name, inputName);

	//为输入左右节点做准备,分配内存
	root->left = (TreeNode*)malloc(sizeof(TreeNode));
	root->right = (TreeNode*)malloc(sizeof(TreeNode));

	//分别递归创建左右子树
	printf("左节点:\n");
	if (CreateBinaryTree(root->left) == NULL)
	{
		//不在创建这个节点则销毁节点刚分配的内存
		free(root->left);
		root->left = NULL;
	}

	printf("右节点:\n");
	if (CreateBinaryTree(root->right) == NULL)
	{
		//不在创建这个节点则销毁节点刚分配的内存
		free(root->right);
		root->right = NULL;
	}
	return root;
}

//前序遍历
void qxbltree(TreeNode* root)
{
	if (!root)
	{
		return;
	}

	printf("%s,%d\t", root->val.name, root->val.id);

	if (root ->left != NULL)
	{
		qxbltree(root->left);
	}

	if (root->right != NULL)
	{
		qxbltree(root->right);
	}

	return;

}

//深度
int funcDepth(TreeNode* root)
{
	if (!root)
	{
		return;
	}

	int myLeft = 1;
	int myRight = 1;

	if (root->left != NULL)
	{
		myLeft += funcDepth(root->left);
	}

	if (root->right != NULL)
	{
		myRight += funcDepth(root->right);
	}

	if (myLeft > myRight)
	{
		return myLeft;
	}
	else
	{
		return myRight;
	}
}

//非递归方式的中序遍历
void inOrderTraversr_Re(TreeNode* node)
{
	//思路 - 根据中序遍历的顺序,对任意节点来讲,有先访问左孩子,而左孩子节点有可以看成一个根节点
	// 然后继续访问左孩子节点为空的节点,按照相同的规则访问右子树
	
	LinkedStack linkedstack;//创建一个栈
	InitLinkedStack(&linkedstack);//初始化栈

	TreeNode* root = node;//两个指针指向同一块地址
	TreeNode* currNode = (TreeNode*)malloc(sizeof(TreeNode));//保存出栈的 留着等释放
	
	//还需要一个临时指针,用来确保最后释放掉上面分配的内存
	//为什么需要,在加个指针指向这块内存,因为currNode这个指针有可能你做题时指针的指向换了,也就是currNode指针不只想这块地址了,所以要提前加来确保
	TreeNode* tempNode = currNode;
	
	while (root || IsLinkedStackEmpty(&linkedstack))//如果栈不为空
	{
		if (root)//现在的节点不为空
		{
			push_back(&linkedstack, root);//这个节点入栈
			root = root->left;//移动到下一个左节点
		}
		else
		{
			//难点,因为目标是二级指针,所以传入的是一级指针的地址
			pop_back(&linkedstack, &currNode);//传进去的是指针的地址,目标是二级指针.
			//出栈打印
			printf("[%s,%d]\t", currNode->val.name, currNode->val.id);
			//拿出来的是栈顶,栈顶是上一个循环刚加入的所以是上一个节点,以此类推.
			root = currNode->right;//这个是上一个节点的右子树,因为现节点已经为空了.如果还是为空,在循环,还是这里,还继续弹出.以此类推
		}
	}
	
	free(tempNode);//释放懂?不释放等着内存泄漏吧
}

//后序遍历
void posOrderTraverse(TreeNode* root)
{
	if (!root)
	{
		return;
	}

	if (root->left != NULL)
	{
		qxbltree(root->left);
	}

	if (root->right != NULL)
	{
		qxbltree(root->right);
	}

	printf("%s,%d\t", root->val.name, root->val.id);

	return;
}

//层序遍历(自上而下,从左到右),利用队列,不需要递归
void zOrderTravers(TreeNode* node)
{
	LinkedQueue queue;
	InitLinkedQueue(&queue);

	//根节点入队
	enQueue(&queue, node);//先进入一个

	while (!IsLinkedQueueEmpty(&queue))//队列不为空
	{
		TreeNode* node = deQueue(&queue);//出一个
		printf("%s,%d\t", node->val.name, node->val.id);//打印出的数据\

		if (node->left != NULL)//如果左不为空
		{
			enQueue(&queue, node->left);//左入队
		}

		if (node->right != NULL)//如果右不为空
		{
			enQueue(&queue, node->right);//右入队
		}
		
	}
}



//////////////////////////////////////////////////main.c
#define _CRT_SECURE_NO_WARNINGS 1
#include"BinaryTree.h"

//整体逻辑使用队列记录节点,不需要递归需要队列,链式队列好写,循环队列知道了内部你就知道怎么写了(需要模运算).
//先创建二叉树

//开始自己创建个函数
void TestBinaryTree();

int main()
{
	TestBinaryTree();

	//函数指针是指向函数的首地址,返回过去的址是返回函数的最后得到的数就是return 的址.typedef 也可以用在函数上.
	/*int a = 1;
	int* p = &a;
	int* p1 = (int*)malloc(sizeof(int));
	printf("%p,%p,%p,%p | %p,%p,%p", p, &p, &a, &*p, p1, &*p1, &p);*/

	return 0;
}

void TestBinaryTree()
{
	BinaryTree tree;
	InitBinaryTree(&tree);
	//容易遗漏的点,根节点要事先分配内存 - C语言的缺点!
	tree.root = (TreeNode*)malloc(sizeof(TreeNode));
	printf("请输入根节点");
	//前序插入(大概)
	CreateBinaryTree(tree.root);

	//前序遍历
	qxbltree(tree.root);
	printf("\n");

	//深度
	int i = funcDepth(tree.root);

	printf("\n深度是 = %d\n", i);
	printf("\n");

	//非递归的中序遍历
	inOrderTraversr_Re(tree.root);
	printf("\n");

	//后序遍历
	posOrderTraverse(tree.root);
	printf("\n");

	//层序遍历
	zOrderTravers(tree.root);
	printf("\n");

	system("pause");

	free(tree.root);
}

