#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
#include<assert.h>
#include<stdlib.h>

//时间复杂度_空间复杂度
//算法效率2种
// 时间复杂度：一个算法运行的速度
// 空间复杂度：一个算法西药的额外空间
//  因为计算机的存储容量已经达到了很高的高度，所以我们就不需要在特别关注一个算法的空间复杂度
//
// 时间复杂度概念
//  算法的时间复杂度是一个函数(数学里面的计算一个值的函数)
//  时间复杂度不是计算一个算法运行了多长时间，因为计算不出来，因为同一个算法运行在不同电脑中是不一样的
//  算的是程序执行的大概次数
//
//列子
//void Func1(int n)
//{
//	int conut = 0;
//	int i = 0;
//	for (i = 0; i < n; i++)
//	{
//		int j = 0;
//		for ( j = 0; j < n; j++)
//		{
//			++conut;
//		}
//	}//这里是n*n
//	int k = 0;
//	for ( k = 0; k < 2*n; k++)
//	{
//		++conut;
//	}//这里是2*n
//	int m = 10;
//	while (m--)
//	{
//		++conut;
//	}//这里是10
//	printf("%d\n", conut);
//}//最后它的时间复杂度是F(n) = N^2 + 2*N + 10
//int main()
//{
//	int n = 10;
//	Func1(n);
//	
//	return 0;
//}
//但是实际当中我们去表示时间复杂度的时候，会用大O的渐近表示法，就是估算
//突出主要，忽略次要 - 抓大放小 - 取最大的那个相，影响最大的，阶数最高的 - 只保留最高阶级
// F(n) = N^2 + 2*N + 10
// 转换
// O(N^2)
//如果是2N^2还是取N^2,去除与这个项目相乘的常数，得到的结果就是大O阶，所以是O(N^2)
// 
//推到大O阶的方法
// 1.用常数1取代运行时间中的所有加法常熟
// 2.在修改后的运行次数函数中，只保留最高阶项
// 3.如果是最高阶项存在且不是1，则去除与这个项目相乘的常数。得到的结果就是大O阶
//
//另外有些算法的时间复杂度存在最好，平均和最坏情况
// 最好：任意输入规模的最小运行次数(下界)
// 平均：任意输入规模的期望运行次数
// 最坏：任意输入规模的最大运行次数(上界)
// 
//列如：在一个长度为N数据中搜索一个数据x
// 最好：1次找到
// 平均：N次找到
// 最坏：N/2次找到
// 一般情况关注算法的最坏运行情况，所以数组中搜索数据时间复杂度为O(N)
//

//列子2
//void Func2(int n)
//{
//	int conut = 0;
//	int i = 0;
//	for (i = 0; i < 2*n; ++i)
//	{
//			++conut;
//		
//	}
//
//	int m = 10;
//	while (m--)
//	{
//		++conut;
//	}
//	printf("%d\n", conut);
//}
//int main()
//{
//	int n = 10;
//	Func2(n);
//
//	return 0;
//}
//影响不大的数都去掉所以是O(N)

//列子3
//void Func3(int n,int m)
//{
//	int conut = 0;
//	int i = 0;
//	for (i = 0; i < m; ++i)
//	{
//		++conut;
//	}
//
//	for ( i = 0; i < n; i++)
//	{
//		++conut;
//	}
//	printf("%d\n", conut);
//}
//int main()
//{
//	int n = 10;
//	int m = 5;
//	Func3(n,m);
//
//	return 0;
//}
//是O(n+m) - 因为是两个都是未知数，如果n>m,那O(n)

//列子4
//void Func4(int n)
//{
//	int conut = 0;
//	int i = 0;
//	for (i = 0; i < 100; ++i)
//	{
//		++conut;
//	}
//}
//int main()
//{
//	int n = 10;
//	
//	func4(n);
//
//	return 0;
//}
//O(1) - 因为O(1)表示常数项

//列子5 - 计算strchr的时间复杂度
// strchr是在字符串中找字符
//const char* strchr(const char* str, int character)
//int main()
//{
//	char n[] = "abcdef";
//	char m = 'e';
//	char* ret = strchr(n, m);
//	printf("%c\n",*ret);
//
//	return 0;
//}
//O(N) - 只调用它一次但是它有可能是一下找到有可能中间找到，还有可能最后找打，要看最坏的情况所以是O(N)

//例子6 - 冒泡排序法
//void BubbleSort(int a[], int n)
//{
//	assert(a);
//	int end = 0;
//	for(end = n; end > 0 ; --end)
//	{
//		int exchange = 0;
//		int i = 0;
//		for ( i = 1; i < end; ++i)
//		{
//			if (a[i-1]>a[i])
//			{
//				Swaps(&a[i - 1], &a[i]);
//				exchange = 1;
//			}
//
//		}
//		if (exchange == 0)
//		{
//			break;
//		}
//	
//	}
//
//}
//int main()
//{
//	int a[] = { 1,3,5,7,9,2,4,6,8,10 };
//	int n = sizeof(a) / sizeof(a[0]);
//	BubbleSort(a, n);
//	printf("%d\n", a);
//	return 0;
//}
//准确的时间复杂度函数是多少
//F(N) =1+2+3+......+n-1
//时间复杂度O(N^2)
//最好情况是O(N)
//

//列子7 - 二分查找
//int BinarySearch(int* a, int n, int x)
//{
//	assert(a);
//	int begin = 0;
//	int end = n-1;
//	while (begin < end)
//	{
//		int mid = begin + ((end - begin) >> 1);
//		if (a[mid] < x )
//		{
//			begin = mid + 1;
//		}
//		else if (a[mid] > x)
//		{
//			end = mid;
//		}
//		else
//		{
//			return mid;
//		}
//	}
//	return -1;
//}
//int main()
//{
//	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int n = 7;
//	
//	int i = 0;
//		printf("%d ", BinarySearch(arr, sz, n));
//	return 0;
//}
//N/2/2/2/..../2 = 想找的数 6
//N = 2^x (x是查找的次数)
// x = log以2为底N的对数
//O(log)
// 
//敏感的数字
// 1000 - 2的10次方是1024
// 100万 - 2的20次方1024*1024
// 10亿 - 2的30次方1024*1024*1024
// 
// 求14亿 -  2的31次方10亿*2 - log以2为底14亿的对数
// log算法虽然很强但是有前提，必须是有序的
// 宏培数和哈希
//

//列子8 - 阶乘递归
//long long Factorial(size_t N)
//{
//	return N < 2 ? N : Factorial(N - 1) * N;
//}
//int main()
//{
//	int a = 3;
//	long long ret = Factorial(a);
//	printf("%d\n", ret);
//	return 0;
//}
//O(N)
//递归算法如何计算：递归次数*每次递归函数的次数
//如果是个循环：O(N^2)

//列子9 - 斐波那契数
//long long Fibonacci_r(size_t N)
//{
//	return N < 2 ? N : Fibonacci_r(N - 1) + Fibonacci_r(N - 2);
//}
//
////优化 - 求出整个斐波那契数
//long long Fibonacci(size_t N)
//{
//	long long* fibArray = malloc(sizeof(long long) * (N+1));
//	fibArray[0] = 0;
//	fibArray[1] = 1;
//	if (N == 0)
//	{
//		return fibArray;
//	}
//	fibArray[1] = 1;
//	//以空间换时间
//	for (int i = 2; i <= N; i++)
//	{
//		fibArray[i] = fibArray[i - 1] + fibArray[i - 2];
//	}
//	return fibArray;
//	free(fibArray);
//	fibArray = NULL;
//}
//
//int main()
//{
//	int a = 40;
//	long long ret = Fibonacci(a);
//	printf("%d\n", ret);
//	
//	return 0;
//}
//2^0+2^1+2^2+......+2^(n-1)
// 为什么是2^(n-1),因为第一个是2^0次方这个是层数
// 层数2^(n-1)用等比数列套出来就是2^n-1，表示所有的个数，虽然有漏掉的但是估算差别不大
//O(2^N)
//这个速度是非常慢的，非常搓的

//空间复杂度
//不去计算你占用的字节，不去看变量多大，而是你定义变量个数。哪怕定义的变量不一样，他都认为是一样的，因为现在的电脑内存空间很大

//列子1 - 冒泡
//void BubbleSort(int a[], int n)
//{
//	assert(a);
//	int end = 0;
//	for(end = n; end > 0 ; --end)
//	{
//		int exchange = 0;
//		int i = 0;
//		for ( i = 1; i < end; ++i)
//		{
//			if (a[i-1]>a[i])
//			{
//				Swaps(&a[i - 1], &a[i]);
//				exchange = 1;
//			}
//
//		}
//		if (exchange == 0)
//		{
//			break;
//		}
//	
//	}
//
//}
//5个 = O(1)

//列子2 - 斐波那契数
//long long Fibonacci(size_t N)
//{
//	long long* fibArray = malloc(sizeof(long long) * N);
//	fibArray[0] = 0;
//	fibArray[1] = 1;
//	if (N == 0)
//	{
//		return fibArray;
//	}
//	fibArray[1] = 1;
//	for (int i = 2; i <= N; i++)
//	{
//		fibArray[i] = fibArray[i - 1] + fibArray[i - 2];
//	}
//	return fibArray;
//	free(fibArray);
//	fibArray = NULL;
//}
//O(N) - 常数都被排除就剩下一个 - long long* fibArray = malloc(sizeof(long long) * N);

//列子3 - 阶乘递归
long long Factorial(size_t N)
{
	return N < 2 ? N : Factorial(N - 1) * N;
}
//常数个 * N(因为递归) -- 常数省略，O(N)

//斐波那契数的空间复杂性是多少
//O(2^N)||O(N)???
