**********************************************list.h
#pragma once
#include<stdio.h>
#include<assert.h>
#include<stdlib.h>

typedef int LTDataType;

typedef struct ListNode
{
	struct ListNode* next;
	struct ListNode* prev;
	LTDataType data;
}ListNode;

//初始化(第一种二级指针，第二种返回指针)
//void ListInit(ListNode** pphead);
ListNode* ListInit();
//给一个值创建一个结点，并返回指针
ListNode BuyListNode(LTDataType x);
//打印(不能是头结点，因为头节点是哨兵位，不存储有效数据，所以是下一个结点，直到打印到头节点就是带哨兵位的时候停止打印就行了)
void ListPrint(ListNode* phead);
//尾插
void ListPushBack(ListNode* phead, LTDataType x);



******************************************************************************list.c
#define _CRT_SECURE_NO_WARNINGS 1

#include"list.h"

//初始化
//void ListInit(ListNode** pphead)
//{
//	(*pphead) = BuyListNode(0);
//	(*pphead)->next = *pphead;
//	(*pphead)->prev = *pphead;
//}
ListNode* ListInit()
{
	ListNode* phead = BuyListNode(0);
	phead->next = phead;
	phead->prev = phead;

	return phead;
}

//创建一个结点
ListNode BuyListNode(LTDataType x)
{
	ListNode* node = (ListNode*)malloc(sizeof(ListNode));
	//C语言除了静态变量和全局变量，不初始化会产生随机值
	node->next = NULL;
	node->prev = NULL;
	node->data = x;
	return *node;
}

//打印
void ListPrint(ListNode* phead)
{
	assert(phead);
	ListNode* cur = phead->next;
	while (cur != phead)
	{
		printf("%d ", cur->data);
		cur = cur->next;
	}
}

//尾插
void ListPushBack(ListNode* phead, LTDataType x)
{
	assert(phead);

	ListNode* tail = phead->prev;
	ListNode* newnode = BuyListNode(x);//这个BuyListNode是增加结点
	// phead ... tail newnode

	tail->next = newnode;
	newnode->prev = tail;

	newnode->next = phead;
	phead->prev = newnode;
}



***********************************************************************day 08.c
#define _CRT_SECURE_NO_WARNINGS 1
#include"list.h"
//双向链表
//链表又8种，单节点中有单项、双项
// 带头、不带头(哨兵位的头节点，不存储有效数据(尾插尾删比较方便))
// 循环、非循环
//  两三相结合，比如单项带头循环，单项不带头循环

// 而我们常见的单链表是单项不带头不循环(oj题，机本不会单独最为链表使用，使用的角度可能作为其他数据结构的子结构或一部分)
// 那双向链表是双项带头循环(作为链表使用，STL中list就是这种结构(C++标准库里面STL),),虽然结构复杂，但是操作简单
// 这两种是最常用的

//当一个结点都没有的时候，头(prev)指向自己和尾(head->next)指向自己，都要指向自己
//尾插一个的时候，让上一个结点尾->next指向新加结点,然后让新的头结->prev指向上一个结点
// 再让头结点的头->prev指向最后一个结点,最后让最后一个结点尾->next指向头节点
void TestList()
{
	//有两种选择，一种是**pphead二级指针，另一种是返回指针
	//ListNode* phead = NULL;
	//ListInit(&phead);
	ListNode* phead = ListInit();
}

int main()
{
	TestList();

	return 0;
}
