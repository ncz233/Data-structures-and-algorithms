#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>

//函数的调用
// 当在一个函数运行期间调用另一个函数时，在运行被调函数之前，系统需要完成三件事 - 列子A函数调用B函数
//  将所有的实际参数，返回地址等信息传递给被调函数保存 -  A函数要把实参，返回地址等信息传给B函数
//  为被调函数的局部变量(也包括形参)分配存储空间 - 为B函数的局部有变量和形参分配空间
//  将控制转移到被调函数的入口 - 要开始执行B函数了
// 从被调函数返回主调函数之前，系统也要完成三件事
//  保存被调用函数的返回结果 - B保存返回的结果，要不然怎么把这个值发给A呢。所以拷贝一份
//  释放被调用所占的存储空间 - B函数调用完要销毁(动态内存不能被销毁，就是堆区内容)
//  依照被调函数保存的返回地址将控制转移到调用函数 - B函数返回结果并且要继续执行A函数了
// 当有多个函数相互调用时，按照“后调用先返回”的原则，上述函数之间信息传递和控制转移必须借助“栈”来实现，即系统将整个程序运行时所需要的数据空间安排在一个栈中
//  每当调用一个函数时，就在栈顶分配一个存储区，进行压栈操作，每当一个函数退出时，就释放它所存储区，就进行出栈操作，当前运行的函数永远都在栈顶的位置
// A函数调用A函数和A函数调用B函数在计算机看来时没有任何区别的，只不过我们日常思维方式理解比较怪异而已

//递归
//long sum(long n)//直接调用自己
//{
//	if (1 == n)
//	{
//		return 1;
//	}
//	else
//	{
//		return sum(n - 1) + n;
//	}
//}
//
//void f(int n)//间接调用自己
//{
//	g(n);
//}
//void g(int m)//间接调用自己
//{
//	f(m);
//}
//
//int main()
//{
//	printf("%ld\n", sum(100));
//
//	return 0;
//}

//调用函数
//int f(int n)
//{
//	int i, j;
//	n += 2;
//	return n;
//}
//
//int main()
//{
//	int val;
//	val = f(5);
//	printf("val = %d\n", val);//这里时7
//	return 0;
//}

//递归
//int f(int n)
//{
//	if (n<3)//如果向自己调用自己那不必须有一个条件，而那个条件会越来越向这个条件靠拢，才能自己递归自己，不然死递归栈溢出
//	{
//		printf("haha\n");
//	}
//	else
//	{
//		n = f(n-1);
//
//	}
//	return n;
//}
//int g(int m)
//{
//	m = m * 2;
//	return m;
//}
//
//int main()
//{
//	printf("%ld\n", f(3));
//
//	return 0;
//}

//递归的值可以递增，但处理的规模在递减
//int f(int n)
//{
//	if (n>3)//如果向自己调用自己那不必须有一个条件，而那个条件会越来越向这个条件靠拢，才能自己递归自己，不然死递归栈溢出
//	{
//		printf("haha\n");
//	}
//	else
//	{
//		n = f(n+1);
//
//	}
//	return n;
//}
//
//int main()
//{
//	printf("%ld\n", f(3));
//
//	return 0;
//}

//循环和递归的关系
// 递归 - 因为调用要发送实参，发送返回地址，给被调函数申请存储空间，还要保存返回的值，又要返回给主调函数。既浪费时间还浪费空间，所以尽量不要用递归，但是有些不用递归解决不了的问题还是要用递归
//  优点 - 易理解
//  缺点 - 速度慢，存储空间比较大(浪费空间)。
// 循环
//  优点 - 速度快，存储空间小(不浪费空间)
//  缺点 - 不易理解
//int f(int n)
//{
//	//递归
//	if (n == 2)
//	{
//		printf("haha\n");
//	}
//	else
//	{
//		n = f(n + 1);
//
//	}
//	return n;
//
//	//循环
//	int s = 0;
//	int i = 0;
//	for ( i = 1; i <= n; n++)
//	{
//		s = +n;
//	}
//	return s;
//}
//
//int main()
//{
//	printf("%ld\n", f(3));
//
//	return 0;
//}

//实现汉诺塔 - 不是线性递归，这个是非线性递归，2的n次方减一 = 2^(n-1)非常大的数字，移动64盘子大到什么成度呢，天文数字，计算机算不出来
//1.一次只能移动一个
//2.移动过程当大盘子永远不能放在小盘子上面
//伪算法
//if (n>1)//当还剩下一个的时候就不用循环了，直接移动
//{
//	先把A柱子上的n-1个盘子从A借助C移动到B - 先把a柱子除了最下面的盘子借助c移动到b - c作为工具人，移动到b
//	将A盘子上的第n个盘子直接移动到C - 然后a最下面的盘子移动到c - A最下面的直接移动到c
//	再将B柱子上的n-1个盘子从B借助A移动到C - b上的所有盘子借助a移动到c
//	/* 将B柱子上的n-1个盘子从B借助C移动到A - 最后b主子除了最下面的盘子借助c移动到a - c又作为工具人，移动到a */这句不是伪算法，是作为上一句话理解用的
//	/* 将B盘子上的第n个盘子直接移动到C - 然后b最下面的盘子移动到c - A最下面的直接移动到c */这句不是伪算法，是作为理解用的
//  /* 将A柱子上的n-1个盘子从A借助C移动到B - 最后A主子除了最下面的盘子借助c移动到b */这句不是伪算法，是作为理解用的,说明这是一个循环，所以第三句话说的是简略移动
//}

void HanNuoTa(int n, char A, char B, char C)
{
	//如果是1个盘子
		//直接从A移到C
	//否则
		//将A柱子上的n-1个盘子借助C移到B
		//直接将A柱子上的盘子从A移动到C
		//最后将B柱子上的n-1个盘子借助C移动到B - 所以a移到b，b移到a，每个柱子上的最后一个移动到c，然后你可以把b看成a再次循环上面的直到剩下最后一个，停止
	if (1 == n)
	{
		printf("将编号为%d的盘子直接从%c柱子移动到%c柱子\n", n, A, C);//这个是柱子上最后一个移动到c
	}
	else
	{
		HanNuoTa(n - 1, A, C, B);//这个是A中n-1移动到B中，执行完之后(就是移动完了后)还剩一个去执行1 == n了
		printf("将编号为%d的盘子直接从%c柱子移动到%c柱子\n", n, A, C);//这个是打印过程
		HanNuoTa(n - 1, B, A, C);//然后可以把b看成a再次循环上面的直到剩下最后一个，因为上一个递归执行完之后都会有一个是空的，有一是柱子上的盘子移动到c柱子，只要他们位置换一下，就可以配对上面的递归了

	}
}

int main()
{
	//三个柱子
	char ch1 = 'A';
	char ch2 = 'B';
	char ch3 = 'C';

	int n;
	printf("请输入要移动盘子的个数\n");
	scanf("%d", &n);

	HanNuoTa(n, 'A', 'B', 'C');
	return 0;
}
